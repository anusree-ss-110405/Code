#include <iostream>
using namespace std;

// Function to check if a given range in the array is a palindrome
bool is_palindrome(int arr[], int start, int end) {
    while (start < end) {
        if (arr[start] != arr[end]) {
            return false;
        }
        start++;
        end--;
    }
    return true;
}

// Function to find the length of the longest palindromic subsequence
int findLongestPalindromeLength(int arr[], int size) {
    int maxLength = 0;

    // Check all possible substrings for palindromes
    for (int i = 0; i < size; i++) {
        for (int j = i; j < size; j++) {
            if (is_palindrome(arr, i, j)) {
                maxLength = max(maxLength, j - i + 1);
            }
        }
    }

    return maxLength;
}

int main() {
    int n;
    cout << "Enter number of elements: ";
    cin >> n;

    int* arr = new int[n]; // Dynamic array to hold input values
    cout << "Enter values: ";
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }

    int longestPalindromeLength = findLongestPalindromeLength(arr, n);
    cout << "Length of the longest palindrome: " << longestPalindromeLength << endl;

    delete[] arr; // Clean up allocated memory
    return 0;
}
